{"version":3,"sources":["img/meme.png","components/MemeGenerator.js","components/Instruction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MemeGenerator","useState","topText","setTopText","bottomText","setBottomText","templates","setTemplates","selectedId","setSelectedId","meme","setMeme","clickedElementClass","useEffect","idMemes","fetch","then","response","json","data","memes","filter","includes","parseInt","id","handleChange","event","fieldName","target","name","fieldValue","value","handleClick","imageId","removeStylesForPreviouslyClickedElement","document","getElementById","classList","add","addStyles","image","remove","className","onSubmit","preventDefault","params","template_id","text0","text1","username","password","qs","stringify","success","url","type","placeholder","onChange","onClick","src","alt","map","elem","Instruction","this","props","title","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be20a70a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/meme.a96d61ed.png\";","import React, { useState, useEffect } from 'react';\r\nimport '../style/MemeGeneratorStyle.css';\r\nimport qs from \"qs\";\r\n\r\nfunction MemeGenerator() {\r\n\r\n    const [topText, setTopText] = useState(\"\");\r\n    const [bottomText, setBottomText] = useState(\"\");\r\n    const [templates, setTemplates] = useState([]);\r\n    const [selectedId, setSelectedId] = useState(null);\r\n    const [meme, setMeme] = useState(null);\r\n    const [clickedElementClass] = useState(\"clicked-img\");\r\n\r\n    useEffect(() => {\r\n        const idMemes = [\r\n            181913649, 112126428, 87743020, 217743513, 124822590, 438680, 247375501, 148909805, 252600902,\r\n            119139145, 4087833, 97984, 178591752, 135256802, 91538330, 91545132, 27813981, 89370399, 61579,\r\n            135678846, 259237855, 101470, 21735, 6235864, 28251713, 61520, 3218037, 101287, 101288, 61556, \r\n            84341851, 14371066, 8072285, 5496396, 61532, 235589, 110163934, 99683372, 4173692, 460541, 16464531,\r\n            61527, 61546, 563423, 285870, 29617627, 922147, 6531067, 56225174, 61585, 109765, 405658, 61539, 61533,\r\n            28034788, 61582, 71428573, 89655, 444501, 61544, 1202623, 27920, 61581, 176908, 14230520, 101716, 54401824,\r\n            61580, 40945639\r\n        ]\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then((response) => response.json())\r\n        .then((json) => setTemplates(json.data.memes.filter((meme) => idMemes.includes(parseInt(meme.id)))));\r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        if (fieldName === \"top\") {\r\n            setTopText(fieldValue);\r\n        } else {\r\n            setBottomText(fieldValue);\r\n        }\r\n    };\r\n\r\n    const handleClick = (imageId) => {\r\n        removeStylesForPreviouslyClickedElement();\r\n        setSelectedId(imageId);\r\n        addStyles(imageId);\r\n        if (imageId === selectedId) {\r\n            removeStylesForPreviouslyClickedElement();\r\n            setSelectedId(null);\r\n        }\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setMeme(null);\r\n        setTopText(\"\");\r\n        setBottomText(\"\");\r\n        removeStylesForPreviouslyClickedElement();\r\n      };\r\n\r\n    function removeStylesForPreviouslyClickedElement() {\r\n        let image = document.getElementById(selectedId);\r\n        if(image){\r\n            image.classList.remove(clickedElementClass);\r\n        }\r\n    }\r\n\r\n    function addStyles(imageId) {\r\n        let image = document.getElementById(imageId);\r\n        image.classList.add(clickedElementClass);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const params = {\r\n            template_id: selectedId,\r\n            text0: topText,\r\n            text1: bottomText,\r\n            username: \"xzk03017\",\r\n            password: \"xzk03017@cndps.com\"\r\n        };\r\n            \r\n    fetch(`https://api.imgflip.com/caption_image?${qs.stringify(params)}`)\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n            if (json.success) {\r\n            setMeme(json.data.url);\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"App-wrapper\">\r\n            <div className=\"form-wrapper\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" id=\"topTextInputId\" name=\"top\" placeholder=\"first meme text\" value={topText} onChange={handleChange} />\r\n                    <input type=\"text\" id=\"bottomTextInputId\" placeholder=\"second meme text\" name=\"bottom\" value={bottomText} onChange={handleChange}/>\r\n                    <button type=\"submit\" id=\"btn\">Generate meme</button>\r\n                    <button type=\"button\" id=\"back-btn\" onClick={handleReset}>Start over\r\n                        <i className=\"fas fa-undo\"></i>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        <div className=\"meme\">{meme ? <img src={meme} alt=\"\" /> : null}</div>\r\n        <div className=\"meme-container\">\r\n            {templates &&\r\n            templates.map((elem) => (\r\n                <img\r\n                id={elem.id}\r\n                onClick={() => handleClick(elem.id)}\r\n                src={elem.url}\r\n                alt=\"\"\r\n                />\r\n            ))}\r\n        </div>\r\n    </div>\r\n    );\r\n    }\r\n\r\nexport default MemeGenerator;\r\n","import React from 'react';\r\nimport '../style/Instruction.css'\r\nimport meme from '../img/meme.png';\r\n\r\nclass Instruction extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"instruction\">\r\n                <div className=\"logo\">\r\n                    <img alt=\"logo\" src={meme}></img>\r\n                </div>\r\n                <h1>{this.props.title}</h1>\r\n                    <li>1. Select a meme and click on it</li>\r\n                    <li>2. Enter first or second text or both</li>\r\n                    <li>3. Click generate meme button</li>\r\n                    <li>4. Click right button in your mouse and download meme if you want</li>\r\n                    <li>5. Start over</li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Instruction;","import React from 'react';\nimport MemeGenerator from './components/MemeGenerator';\nimport Instruction from './components/Instruction';\n\nclass App extends React.Component {\n\nrender() {\n  return (\n    <div className=\"App\">\n      <Instruction title=\"Instruction\"/>\n      <MemeGenerator/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}